@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "Add Quote";

    Validation.RequireField("firstName", "You must enter your first name");
    Validation.RequireField("lastName", "You must enter your last name");
    Validation.RequireField("width", "You must enter the width");
    Validation.RequireField("depth", "You must enter the depth");
    Validation.RequireField("deskNumber", "You must enter the number of desks");
   

    var firstName = "";
    var lastName = "";
    var width = "";
    var depth = "";
    var drawers = "";
    var material = "";
    var shipping = "";
    float price = -1;
    var date = "";
    var deskNumber = "";

    if (IsPost && Validation.IsValid())
    {
        firstName = Request.Form["firstName"];
        lastName = Request.Form["lastName"];
        date = DateTime.Now.ToString();
        width = Request.Form["width"];
        depth = Request.Form["depth"];
        drawers = Request.Form["drawers"];
        material = Request.Form["material"];
        shipping = Request.Form["shipping"];
        deskNumber = Request.Form["deskNumber"];
        price = calculateQuotePrice(float.Parse(width),
            float.Parse(depth),
            int.Parse(drawers),
            material,
            shipping);

        var db = WebMatrix.Data.Database.Open("MegaDeskdb");
        var insertCommand = "INSERT INTO CompleteDesk (first_name, last_name, Width, Depth, dwr_number, surface_mat, num_of_desk, shipping_spd, order_total) VALUES(@0, @1, @2, @3, @4, @5, @6, @7, @8)";
        db.Execute(insertCommand, firstName, lastName, float.Parse(width), float.Parse(depth), int.Parse(drawers), material, int.Parse(deskNumber), shipping, price.ToString());
     

        Response.Redirect("~/ViewQuotes.cshtml");
    }

    float calculateQuotePrice(float cWidth, float cDepth, int cDrawers, string cMaterial, string cShipping)
    {
        int basePrice = 200;
        float drawerPrice = calculateDrawerPrice(cDrawers);
        float surfaceArea = calculateSurfaceArea(cWidth, cDepth);
        float surfaceAreaPrice = calculateSurfaceAreaPrice(surfaceArea);
        float surfaceMaterialPrice = calculateSurfaceMaterialPrice(cMaterial);
        float shippingPrice = calculateShippingPrice(cShipping, surfaceArea);

        float quotePrice = (drawerPrice + surfaceAreaPrice + surfaceMaterialPrice + shippingPrice + basePrice);

        return quotePrice;
    }

    float calculateDrawerPrice(int cDrawers)
    {
        int costPerDrawer = 50;
        int cost = (costPerDrawer * cDrawers);

        return cost;
    }
    float calculateSurfaceArea(float cWidth, float cDepth)
    {
        float area = (cWidth * cDepth);
        return area;
    }
    float calculateSurfaceAreaPrice(float surfaceArea)
    {
        float cost;

        if (surfaceArea <= 1000)
        {
            cost = 0;
        }
        else
        {
            cost = (surfaceArea - 1000);
        }
        return cost;
    }

    float calculateSurfaceMaterialPrice(string cMaterial)
    {
        int cost;
        switch (cMaterial)
        {
            case "Oak":
                cost = 200;
                return cost;
            case "Laminate":
                cost = 100;
                return cost;
            case "Pine":
                cost = 50;
                return cost;
            case "Rosewood":
                cost = 300;
                return cost;
            case "Veneer":
                cost = 125;
                return cost;
            default:
                cost = 0;
                return cost;
        }
    }

    float calculateShippingPrice(string cShipping, float surfaceArea)
    {
        int cost;

        switch (cShipping)
        {
            case "3 Day":
                if (surfaceArea < 1000)
                {
                    cost = 60;
                    return cost;
                }
                else if (surfaceArea >= 1000 && surfaceArea <= 2000)
                {
                    cost = 70;
                    return cost;
                }
                else
                {
                    cost = 80;
                    return cost;
                }
            case "5 Day":
                if (surfaceArea < 1000)
                {
                    cost = 40;
                    return cost;
                }
                else if (surfaceArea >= 1000 && surfaceArea <= 2000)
                {
                    cost = 50;
                    return cost;
                }
                else
                {
                    cost = 60;
                    return cost;
                }
            case "7 Day":
                if (surfaceArea < 1000)
                {
                    cost = 30;
                    return cost;
                }
                else if (surfaceArea >= 1000 && surfaceArea <= 2000)
                {
                    cost = 35;
                    return cost;
                }
                else
                {
                    cost = 40;
                    return cost;
                }
            default:
                cost = 0;
                return cost;
        }

    }
}


    <h2>New Desk Quote</h2>

    <form method="post">
        <fieldset>
            <legend>Desk Specifications</legend>
            <p>
                <label for="firstName">First Name: </label>
                <input type="text" name="firstName" value="@Request.Form["firstName"]" />
                @Html.ValidationMessage("firstName")
            </p>

            <p>
                <label for="lastName">Last Name: </label>
                <input type="text" name="lastName" value="@Request.Form["lastName"]" />
                @Html.ValidationMessage("lastName")
            </p>

            <p>
                <label for="width">Width: </label>
                <input type="text" name="width" value="@Request.Form["width"]" />
                @Html.ValidationMessage("width")
            </p>

            <p>
                <label for="depth">Depth: </label>
                <input type="text" name="depth" value="@Request.Form["depth"]" />
                @Html.ValidationMessage("depth")
            </p>

            <p>
                <label for="drawers">Drawers: </label>
                <select type="text" name="drawers" value="@Request.Form["drawers"]">
                    <option value="1">One</option>
                    <option value="2">Two</option>
                    <option value="3">Three</option>
                    <option value="4">Four</option>
                    <option value="5">Five</option>
                    <option value="6">Six</option>
                    <option value="7">Seven</option>
                </select>
                @Html.ValidationMessage("drawers")
            </p>

            <p>
                <label for="material">Material: </label>
            <select name="material" value="@Request.Form["material"]">
                <option value="Pine">Pine</option>
                <option value="Laminate">Laminate</option>
                <option value="Rosewood">Rosewood</option>
                <option value="Oak">Oak</option>
                <option value="Veneer">Veneer</option>
            </select>
                @Html.ValidationMessage("material")
            </p>
            <p>
                <label for="shipping">Shipping: </label>
                <select type="text" name="shipping" value="@Request.Form["shipping"]">
                    <option value="3 day">3 Day</option>
                    <option value="5 day">5 Day</option>
                    <option value="7 day">7 Day</option>
                </select>
                @Html.ValidationMessage("shippin")
            </p>

            <p>
                <label for="deskNumber">Number of Desks: </label>
                <input type="text" name="deskNumber" value="@Request.Form["deskNumber"]" />
                @Html.ValidationMessage("deskNumber")
            </p>

            <p><input type="submit" name="buttonSubmit" value="Submit" /></p>
        </fieldset>
    </form>
